"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.authControllerInstance = void 0;
const index_1 = require("./../infrastructure/rabbitMQ/index");
const authController_1 = __importDefault(require("../adaptors/authController"));
const repository_1 = __importDefault(require("../infrastructure/repositories/repository"));
const send_verification_mail_1 = __importDefault(require("./send-verification-mail"));
const signupUsecase_1 = require("../usecases/signupUsecase");
const github_1 = require("./github/github");
const addTeamConsumer_1 = require("../infrastructure/rabbitMQ/consumer/addTeamConsumer");
const verifyOtpUsecase_1 = require("../usecases/verifyOtpUsecase");
const loginUseCases_1 = require("../usecases/loginUseCases");
const resendOtpUseCases_1 = require("../usecases/resendOtpUseCases");
const googleLoginUsecases_1 = require("../usecases/googleLoginUsecases");
const githubLoginUseCases_1 = require("../usecases/githubLoginUseCases");
const validateTokenUseCases_1 = require("../usecases/validateTokenUseCases");
const createTeamUseCases_1 = require("../usecases/createTeamUseCases");
const getUserUsecases_1 = require("../usecases/getUserUsecases");
const changePasswordUsecases_1 = require("../usecases/changePasswordUsecases");
const changeEmail_1 = require("../usecases/changeEmail");
const projectService_1 = require("../infrastructure/grpc/projectService");
const GrpcServer_1 = require("../infrastructure/grpc/GrpcServer");
const getTeamMembersUsecases_1 = require("../usecases/getTeamMembersUsecases");
const getAllUsersUseCases_1 = require("../usecases/getAllUsersUseCases");
const updateImgUseCases_1 = require("../usecases/updateImgUseCases");
const cloudinary_1 = require("../providers/cloudinary");
const sendRequestUsecases_1 = require("../usecases/sendRequestUsecases");
const updateProfileCases_1 = require("../usecases/updateProfileCases");
//provider
const nodemailerInstance = new send_verification_mail_1.default();
const githubClient = new github_1.Github();
const RabbitMQServiceInstance = new index_1.RabbitMQService();
const repositoryInstance = new repository_1.default();
//rpc
const projectRpcInstance = new projectService_1.ProjectRpcServer(repositoryInstance);
new GrpcServer_1.GrpcServer(projectRpcInstance);
const SignupInstance = new signupUsecase_1.Signup(repositoryInstance, nodemailerInstance);
const VerifyOtpInstance = new verifyOtpUsecase_1.VerifyOtp(repositoryInstance);
const resendOtpInstance = new resendOtpUseCases_1.ResendOtp(repositoryInstance);
const loginInstance = new loginUseCases_1.Login(repositoryInstance);
const googleLoginInstance = new googleLoginUsecases_1.GoogleLogin(repositoryInstance);
const githubLoginInstance = new githubLoginUseCases_1.gitHubLogin(repositoryInstance, githubClient);
const validateTokenInstance = new validateTokenUseCases_1.ValidateToken();
const createTeamInstance = new createTeamUseCases_1.CreateTeam(repositoryInstance, RabbitMQServiceInstance);
const cloudinaryInstance = new cloudinary_1.Cloudinary();
const getUserInstance = new getUserUsecases_1.GetUser(repositoryInstance);
const changePasswordInstance = new changePasswordUsecases_1.ChangePassword(repositoryInstance);
const changeEmailInstance = new changeEmail_1.ChangeEmail(repositoryInstance);
const getTeamMembers = new getTeamMembersUsecases_1.GetTeamMembers(repositoryInstance);
const getAllUsers = new getAllUsersUseCases_1.GetAllUsers(repositoryInstance);
const updateImg = new updateImgUseCases_1.UpdateImage(repositoryInstance, cloudinaryInstance);
const sendRequest = new sendRequestUsecases_1.SendRequest(repositoryInstance);
const updateProfile = new updateProfileCases_1.UpdateProfile(repositoryInstance);
// const getRequest = new GetRequest(repositoryInstance)
new addTeamConsumer_1.AddTeamConsumer(createTeamInstance);
exports.authControllerInstance = new authController_1.default(SignupInstance, VerifyOtpInstance, resendOtpInstance, loginInstance, googleLoginInstance, githubLoginInstance, validateTokenInstance, getUserInstance, changePasswordInstance, changeEmailInstance, getTeamMembers, updateImg, getAllUsers, sendRequest, updateProfile);
