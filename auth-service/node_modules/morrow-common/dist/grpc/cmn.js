"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.5.0
//   protoc               v5.28.3
// source: src/grpc/cmn.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProjectServiceClient = exports.ProjectServiceService = exports.UserServiceClient = exports.UserServiceService = exports.TeamResponse = exports.UserRequest = exports.Project = exports.ProjectsResponse = exports.ProjectRequest = exports.protobufPackage = void 0;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
const grpc_js_1 = require("@grpc/grpc-js");
const timestamp_1 = require("../google/protobuf/timestamp");
exports.protobufPackage = "";
function createBaseProjectRequest() {
    return { teamIds: [] };
}
exports.ProjectRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.teamIds) {
            writer.uint32(10).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseProjectRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.teamIds.push(reader.string());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            teamIds: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.teamIds) ? object.teamIds.map((e) => globalThis.String(e)) : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.teamIds) === null || _a === void 0 ? void 0 : _a.length) {
            obj.teamIds = message.teamIds;
        }
        return obj;
    },
    create(base) {
        return exports.ProjectRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseProjectRequest();
        message.teamIds = ((_a = object.teamIds) === null || _a === void 0 ? void 0 : _a.map((e) => e)) || [];
        return message;
    },
};
function createBaseProjectsResponse() {
    return { projects: [] };
}
exports.ProjectsResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.projects) {
            exports.Project.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseProjectsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.projects.push(exports.Project.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            projects: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.projects) ? object.projects.map((e) => exports.Project.fromJSON(e)) : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.projects) === null || _a === void 0 ? void 0 : _a.length) {
            obj.projects = message.projects.map((e) => exports.Project.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.ProjectsResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseProjectsResponse();
        message.projects = ((_a = object.projects) === null || _a === void 0 ? void 0 : _a.map((e) => exports.Project.fromPartial(e))) || [];
        return message;
    },
};
function createBaseProject() {
    return {
        id: 0,
        name: "",
        projectDescription: "",
        teamId: "",
        projectStartDate: undefined,
        projectEndDate: undefined,
        plannedStartDate: undefined,
        plannedEndDate: undefined,
        createdAt: undefined,
        updatedAt: undefined,
    };
}
exports.Project = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== 0) {
            writer.uint32(8).int32(message.id);
        }
        if (message.name !== "") {
            writer.uint32(18).string(message.name);
        }
        if (message.projectDescription !== "") {
            writer.uint32(26).string(message.projectDescription);
        }
        if (message.teamId !== "") {
            writer.uint32(34).string(message.teamId);
        }
        if (message.projectStartDate !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.projectStartDate), writer.uint32(42).fork()).join();
        }
        if (message.projectEndDate !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.projectEndDate), writer.uint32(50).fork()).join();
        }
        if (message.plannedStartDate !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.plannedStartDate), writer.uint32(58).fork()).join();
        }
        if (message.plannedEndDate !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.plannedEndDate), writer.uint32(66).fork()).join();
        }
        if (message.createdAt !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.createdAt), writer.uint32(74).fork()).join();
        }
        if (message.updatedAt !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.updatedAt), writer.uint32(82).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseProject();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.id = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.projectDescription = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.teamId = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.projectStartDate = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.projectEndDate = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.plannedStartDate = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.plannedEndDate = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    continue;
                }
                case 9: {
                    if (tag !== 74) {
                        break;
                    }
                    message.createdAt = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    continue;
                }
                case 10: {
                    if (tag !== 82) {
                        break;
                    }
                    message.updatedAt = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.Number(object.id) : 0,
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            projectDescription: isSet(object.projectDescription) ? globalThis.String(object.projectDescription) : "",
            teamId: isSet(object.teamId) ? globalThis.String(object.teamId) : "",
            projectStartDate: isSet(object.projectStartDate) ? fromJsonTimestamp(object.projectStartDate) : undefined,
            projectEndDate: isSet(object.projectEndDate) ? fromJsonTimestamp(object.projectEndDate) : undefined,
            plannedStartDate: isSet(object.plannedStartDate) ? fromJsonTimestamp(object.plannedStartDate) : undefined,
            plannedEndDate: isSet(object.plannedEndDate) ? fromJsonTimestamp(object.plannedEndDate) : undefined,
            createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
            updatedAt: isSet(object.updatedAt) ? fromJsonTimestamp(object.updatedAt) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== 0) {
            obj.id = Math.round(message.id);
        }
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.projectDescription !== "") {
            obj.projectDescription = message.projectDescription;
        }
        if (message.teamId !== "") {
            obj.teamId = message.teamId;
        }
        if (message.projectStartDate !== undefined) {
            obj.projectStartDate = message.projectStartDate.toISOString();
        }
        if (message.projectEndDate !== undefined) {
            obj.projectEndDate = message.projectEndDate.toISOString();
        }
        if (message.plannedStartDate !== undefined) {
            obj.plannedStartDate = message.plannedStartDate.toISOString();
        }
        if (message.plannedEndDate !== undefined) {
            obj.plannedEndDate = message.plannedEndDate.toISOString();
        }
        if (message.createdAt !== undefined) {
            obj.createdAt = message.createdAt.toISOString();
        }
        if (message.updatedAt !== undefined) {
            obj.updatedAt = message.updatedAt.toISOString();
        }
        return obj;
    },
    create(base) {
        return exports.Project.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
        const message = createBaseProject();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : 0;
        message.name = (_b = object.name) !== null && _b !== void 0 ? _b : "";
        message.projectDescription = (_c = object.projectDescription) !== null && _c !== void 0 ? _c : "";
        message.teamId = (_d = object.teamId) !== null && _d !== void 0 ? _d : "";
        message.projectStartDate = (_e = object.projectStartDate) !== null && _e !== void 0 ? _e : undefined;
        message.projectEndDate = (_f = object.projectEndDate) !== null && _f !== void 0 ? _f : undefined;
        message.plannedStartDate = (_g = object.plannedStartDate) !== null && _g !== void 0 ? _g : undefined;
        message.plannedEndDate = (_h = object.plannedEndDate) !== null && _h !== void 0 ? _h : undefined;
        message.createdAt = (_j = object.createdAt) !== null && _j !== void 0 ? _j : undefined;
        message.updatedAt = (_k = object.updatedAt) !== null && _k !== void 0 ? _k : undefined;
        return message;
    },
};
function createBaseUserRequest() {
    return { userId: "" };
}
exports.UserRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.userId !== "") {
            writer.uint32(10).string(message.userId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUserRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.userId = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { userId: isSet(object.userId) ? globalThis.String(object.userId) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.userId !== "") {
            obj.userId = message.userId;
        }
        return obj;
    },
    create(base) {
        return exports.UserRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseUserRequest();
        message.userId = (_a = object.userId) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseTeamResponse() {
    return { teamIds: [] };
}
exports.TeamResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.teamIds) {
            writer.uint32(10).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTeamResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.teamIds.push(reader.string());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            teamIds: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.teamIds) ? object.teamIds.map((e) => globalThis.String(e)) : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.teamIds) === null || _a === void 0 ? void 0 : _a.length) {
            obj.teamIds = message.teamIds;
        }
        return obj;
    },
    create(base) {
        return exports.TeamResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseTeamResponse();
        message.teamIds = ((_a = object.teamIds) === null || _a === void 0 ? void 0 : _a.map((e) => e)) || [];
        return message;
    },
};
exports.UserServiceService = {
    getTeamIds: {
        path: "/UserService/GetTeamIds",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value) => Buffer.from(exports.UserRequest.encode(value).finish()),
        requestDeserialize: (value) => exports.UserRequest.decode(value),
        responseSerialize: (value) => Buffer.from(exports.TeamResponse.encode(value).finish()),
        responseDeserialize: (value) => exports.TeamResponse.decode(value),
    },
};
exports.UserServiceClient = (0, grpc_js_1.makeGenericClientConstructor)(exports.UserServiceService, "UserService");
exports.ProjectServiceService = {
    getProjectDetails: {
        path: "/ProjectService/GetProjectDetails",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value) => Buffer.from(exports.ProjectRequest.encode(value).finish()),
        requestDeserialize: (value) => exports.ProjectRequest.decode(value),
        responseSerialize: (value) => Buffer.from(exports.ProjectsResponse.encode(value).finish()),
        responseDeserialize: (value) => exports.ProjectsResponse.decode(value),
    },
};
exports.ProjectServiceClient = (0, grpc_js_1.makeGenericClientConstructor)(exports.ProjectServiceService, "ProjectService");
function toTimestamp(date) {
    const seconds = Math.trunc(date.getTime() / 1000);
    const nanos = (date.getTime() % 1000) * 1000000;
    return { seconds, nanos };
}
function fromTimestamp(t) {
    let millis = (t.seconds || 0) * 1000;
    millis += (t.nanos || 0) / 1000000;
    return new globalThis.Date(millis);
}
function fromJsonTimestamp(o) {
    if (o instanceof globalThis.Date) {
        return o;
    }
    else if (typeof o === "string") {
        return new globalThis.Date(o);
    }
    else {
        return fromTimestamp(timestamp_1.Timestamp.fromJSON(o));
    }
}
function isSet(value) {
    return value !== null && value !== undefined;
}
